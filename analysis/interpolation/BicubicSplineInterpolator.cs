/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace org.apache.commons.math3.analysis.interpolation
{

	using PolynomialSplineFunction = org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;
	using DimensionMismatchException = org.apache.commons.math3.exception.DimensionMismatchException;
	using NoDataException = org.apache.commons.math3.exception.NoDataException;
	using NonMonotonicSequenceException = org.apache.commons.math3.exception.NonMonotonicSequenceException;
	using NumberIsTooSmallException = org.apache.commons.math3.exception.NumberIsTooSmallException;
	using MathArrays = org.apache.commons.math3.util.MathArrays;

	/// <summary>
	/// Generates a bicubic interpolating function.
	/// 
	/// @version $Id: BicubicSplineInterpolator.java 1455194 2013-03-11 15:45:54Z luc $
	/// @since 2.2
	/// </summary>
	public class BicubicSplineInterpolator : BivariateGridInterpolator
	{
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public BicubicSplineInterpolatingFunction interpolate(final double[] xval, final double[] yval, final double[][] fval) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NonMonotonicSequenceException, org.apache.commons.math3.exception.NumberIsTooSmallException
//JAVA TO C# CONVERTER WARNING: 'final' parameters are not allowed in .NET:
		public virtual BicubicSplineInterpolatingFunction interpolate(double[] xval, double[] yval, double[][] fval)
		{
			if (xval.Length == 0 || yval.Length == 0 || fval.Length == 0)
			{
				throw new NoDataException();
			}
			if (xval.Length != fval.Length)
			{
				throw new DimensionMismatchException(xval.Length, fval.Length);
			}

			MathArrays.checkOrder(xval);
			MathArrays.checkOrder(yval);

//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final int xLen = xval.length;
			int xLen = xval.Length;
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final int yLen = yval.length;
			int yLen = yval.Length;

			// Samples (first index is y-coordinate, i.e. subarray variable is x)
			// 0 <= i < xval.length
			// 0 <= j < yval.length
			// fX[j][i] = f(xval[i], yval[j])
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final double[][] fX = new double[yLen][xLen];
//JAVA TO C# CONVERTER NOTE: The following call to the 'RectangularArrays' helper class reproduces the rectangular array initialization that is automatic in Java:
//ORIGINAL LINE: double[][] fX = new double[yLen][xLen];
			double[][] fX = RectangularArrays.ReturnRectangularDoubleArray(yLen, xLen);
			for (int i = 0; i < xLen; i++)
			{
				if (fval[i].Length != yLen)
				{
					throw new DimensionMismatchException(fval[i].Length, yLen);
				}

				for (int j = 0; j < yLen; j++)
				{
					fX[j][i] = fval[i][j];
				}
			}

//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final SplineInterpolator spInterpolator = new SplineInterpolator();
			SplineInterpolator spInterpolator = new SplineInterpolator();

			// For each line y[j] (0 <= j < yLen), construct a 1D spline with
			// respect to variable x
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[] ySplineX = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[yLen];
			PolynomialSplineFunction[] ySplineX = new PolynomialSplineFunction[yLen];
			for (int j = 0; j < yLen; j++)
			{
				ySplineX[j] = spInterpolator.interpolate(xval, fX[j]);
			}

			// For each line x[i] (0 <= i < xLen), construct a 1D spline with
			// respect to variable y generated by array fY_1[i]
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[] xSplineY = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[xLen];
			PolynomialSplineFunction[] xSplineY = new PolynomialSplineFunction[xLen];
			for (int i = 0; i < xLen; i++)
			{
				xSplineY[i] = spInterpolator.interpolate(yval, fval[i]);
			}

			// Partial derivatives with respect to x at the grid knots
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final double[][] dFdX = new double[xLen][yLen];
//JAVA TO C# CONVERTER NOTE: The following call to the 'RectangularArrays' helper class reproduces the rectangular array initialization that is automatic in Java:
//ORIGINAL LINE: double[][] dFdX = new double[xLen][yLen];
			double[][] dFdX = RectangularArrays.ReturnRectangularDoubleArray(xLen, yLen);
			for (int j = 0; j < yLen; j++)
			{
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final org.apache.commons.math3.analysis.UnivariateFunction f = ySplineX[j].derivative();
				UnivariateFunction f = ySplineX[j].derivative();
				for (int i = 0; i < xLen; i++)
				{
					dFdX[i][j] = f.value(xval[i]);
				}
			}

			// Partial derivatives with respect to y at the grid knots
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final double[][] dFdY = new double[xLen][yLen];
//JAVA TO C# CONVERTER NOTE: The following call to the 'RectangularArrays' helper class reproduces the rectangular array initialization that is automatic in Java:
//ORIGINAL LINE: double[][] dFdY = new double[xLen][yLen];
			double[][] dFdY = RectangularArrays.ReturnRectangularDoubleArray(xLen, yLen);
			for (int i = 0; i < xLen; i++)
			{
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final org.apache.commons.math3.analysis.UnivariateFunction f = xSplineY[i].derivative();
				UnivariateFunction f = xSplineY[i].derivative();
				for (int j = 0; j < yLen; j++)
				{
					dFdY[i][j] = f.value(yval[j]);
				}
			}

			// Cross partial derivatives
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final double[][] d2FdXdY = new double[xLen][yLen];
//JAVA TO C# CONVERTER NOTE: The following call to the 'RectangularArrays' helper class reproduces the rectangular array initialization that is automatic in Java:
//ORIGINAL LINE: double[][] d2FdXdY = new double[xLen][yLen];
			double[][] d2FdXdY = RectangularArrays.ReturnRectangularDoubleArray(xLen, yLen);
			for (int i = 0; i < xLen ; i++)
			{
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final int nI = nextIndex(i, xLen);
				int nI = nextIndex(i, xLen);
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final int pI = previousIndex(i);
				int pI = previousIndex(i);
				for (int j = 0; j < yLen; j++)
				{
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final int nJ = nextIndex(j, yLen);
					int nJ = nextIndex(j, yLen);
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final int pJ = previousIndex(j);
					int pJ = previousIndex(j);
					d2FdXdY[i][j] = (fval[nI][nJ] - fval[nI][pJ] - fval[pI][nJ] + fval[pI][pJ]) / ((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]));
				}
			}

			// Create the interpolating splines
			return new BicubicSplineInterpolatingFunction(xval, yval, fval, dFdX, dFdY, d2FdXdY);
		}

		/// <summary>
		/// Computes the next index of an array, clipping if necessary.
		/// It is assumed (but not checked) that {@code i >= 0}.
		/// </summary>
		/// <param name="i"> Index. </param>
		/// <param name="max"> Upper limit of the array. </param>
		/// <returns> the next index. </returns>
		private int nextIndex(int i, int max)
		{
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final int index = i + 1;
			int index = i + 1;
			return index < max ? index : index - 1;
		}
		/// <summary>
		/// Computes the previous index of an array, clipping if necessary.
		/// It is assumed (but not checked) that {@code i} is smaller than the size
		/// of the array.
		/// </summary>
		/// <param name="i"> Index. </param>
		/// <returns> the previous index. </returns>
		private int previousIndex(int i)
		{
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final int index = i - 1;
			int index = i - 1;
			return index >= 0 ? index : 0;
		}
	}

}